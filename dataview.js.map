{"version":3,"sources":["vistorian/dataview.ts"],"names":[],"mappings":"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","file":"vistorian/dataview.js","sourcesContent":["/// <reference path=\"./classes/storage.ts\"/>\n/// <reference path=\"../networkcube/core/networkcube.d.ts\"/>\n/// <reference path=\"./classes/vistorian.ts\" />\n\n\ndocument.getElementById('files').addEventListener('change', getFileInfos, false);\n\nvar SESSION_NAME = utils.getUrlVars()['session'];\nstorage.saveSessionId(); // save id for later retrieve\n\nvar tables = storage.getUserTables();\n\n// user's currently selected network. All visualizations will visualize this network\nvar currentNetwork: vistorian.Network;\n\n// visualizations among which the user can chose\n// format: [shown name, codename]\nvar visualizations = [\n    ['Node Link', 'nodelink'],\n    ['Adjacency Matrix', 'matrix'],\n    ['Dynamic Ego Network', 'dynamicego'],\n    ['Map', 'map'],\n\n]\n\n\nvar messages: string[] = [];\n\n\ninit()\n\nfunction init() {\n\n    loadVisualizationList()\n\n    loadNetworkList()\n\n    loadTableList()\n}\n\n// loads the list of available visualizations and displays them on the left\nfunction loadVisualizationList() {\n    // create visualization links\n    visualizations.forEach(function(v) {\n        $('#visualizationList')\n            .append('<li class=\"visLink\"><button onclick=\"loadVisualization(\\'' + v[1] + '\\')\" class=\"visbutton\"><img src=\"logos/vis-' + v[1] + '.png\" class=\"menuicon\"/>' + v[0] + '</button></li>')\n    })\n    $('#visualizationList')\n        .append('<li class=\"visLink\"><a target=\"_blank\" id=\"tileViewLink\" href=\"visview.html?session=' + SESSION_NAME + '\"><img src=\"logos/tiled.png\" class=\"menuicon\"/>Tiled View</a></li>')\n}\n\n\n\n// loads the list of tables in this session and displays them on the left\nfunction loadTableList() {\n    $('#tableList').empty()\n    var tableNames = storage.getTableNames()\n    tableNames.forEach(t => {\n        $('#tableList').append('<li><a onclick=\"showSingleTable(\\'' + t + '\\')\"  class=\"underlined\">' + t + '.csv</a></li>')\n    })\n}\n\n// loads the list of networks for this session and displays them on the left\nfunction loadNetworkList() {\n\n    $('#networkList').empty()\n    var networkNames = storage.getNetworkIds()\n    var network: vistorian.Network;\n    networkNames.forEach(t => {\n        network = storage.getNetwork(t);\n        $('#networkList').append('<li><a onclick=\"showNetwork(\\'' + network.id + '\\')\"  class=\"underlined\">' + network.name + '</a></li>')\n    })\n}\n\n\n\n// VISUALIZATIONS\n\n// creates a new visualization of the passed type\nfunction loadVisualization(visType) {\n    // networkcube.openVisualizationWindow(SESSION_NAME, 'sites/'+visType+'.html, currentNetwork.name);\n    window.open('sites/' + visType + '.html?session=' + SESSION_NAME + '&datasetName=' + currentNetwork.name);\n}\n\n\n\n\n\n// CREATE NETWORK //\n\nfunction createNetwork() {\n\n    var networkIds = storage.getNetworkIds();\n    var id = 1;\n    if (networkIds.length > 0) {\n        id = networkIds[networkIds.length - 1] + 1;\n    }\n\n    currentNetwork = new vistorian.Network(id);\n    currentNetwork.name = 'New Network ' + currentNetwork.id;\n    storage.saveNetwork(currentNetwork);\n\n    showNetwork(currentNetwork.id)\n    saveCurrentNetwork(true);\n    loadNetworkList();\n}\n\nfunction setNodeTable(list) {\n    var tableName = list.value;\n    if (tableName != '---') {\n        var table: vistorian.VTable = storage.getUserTable(tableName);\n        currentNetwork.userNodeTable = table;\n        showTable(table, '#nodeTableDiv', false, currentNetwork.userNodeSchema)\n    } else {\n        unshowTable('#nodeTableDiv');\n        currentNetwork.userNodeTable = undefined;\n    }\n}\n\nfunction setLinkTable(list) {\n    var tableName = list.value;\n    if (tableName != '---') {\n        var table: vistorian.VTable = storage.getUserTable(tableName);\n        currentNetwork.userLinkTable = table;\n        showTable(table, '#linkTableDiv', false, currentNetwork.userLinkSchema);\n    } else {\n        unshowTable('#linkTableDiv');\n        currentNetwork.userLinkTable = undefined;\n    }\n}\nfunction setLocationTable(list) {\n    var tableName = list.value;\n    if (tableName != '---') {\n        var table: vistorian.VTable = storage.getUserTable(tableName);\n        currentNetwork.userLocationTable = table;\n        currentNetwork.userLocationSchema = new networkcube.LocationSchema(0, 1, 2, 3, 4);\n        showTable(table, '#locationTableDiv', true, currentNetwork.userLocationSchema);\n    } else {\n        unshowTable('#locationTableDiv');\n        currentNetwork.userLocationTable = undefined;\n    }\n}\n\n\n// saves/updates and normalizes current network.\nfunction saveCurrentNetwork(failSilently: boolean) {\n\n    var networkcubeDataSet: networkcube.DataSet;\n\n    saveCellChanges();\n\n    // create new network data set, if necessary\n    if (currentNetwork.networkCubeDataSet == undefined) {\n        networkcubeDataSet = new networkcube.DataSet({\n            name: currentNetwork.name,\n            nodeTable: [],\n            linkTable: [],\n            locationTable: []\n        });\n        currentNetwork.networkCubeDataSet = networkcubeDataSet;\n    } else {\n        networkcubeDataSet = currentNetwork.networkCubeDataSet;\n    }\n\n    currentNetwork.name = $('#networknameInput').val();\n    currentNetwork.networkCubeDataSet.name = $('#networknameInput').val();\n\n    if (currentNetwork.userNodeSchema.time != -1) {\n        currentNetwork.timeFormat = $('#timeFormatInput_' + currentNetwork.userNodeSchema.name).val()\n    }\n\n    if (currentNetwork.userLinkSchema.time != -1) {\n        currentNetwork.timeFormat = $('#timeFormatInput_' + currentNetwork.userLinkSchema.name).val()\n    }\n\n    console.log('currentNetwork.timeFormat', currentNetwork.timeFormat);\n\n    // check dates if apply\n    checkTimeFormatting(currentNetwork);\n\n    if (!currentNetwork.userNodeTable && !currentNetwork.userLinkTable) {\n        if (!failSilently)\n            showMessage(\"Cannot save without a Node table or a Link Table\", 2000);\n        return;\n    }\n\n    // trim cell entries (remove overhead white space)\n    if (currentNetwork.userNodeTable)\n        vistorian.cleanTable(currentNetwork.userNodeTable.data);\n    if (currentNetwork.userLinkTable)\n        vistorian.cleanTable(currentNetwork.userLinkTable.data);\n\n\n    // get references to tables\n    var normalizedNodeTable: any[] = currentNetwork.networkCubeDataSet.nodeTable;\n    var normalizedLinkTable: any[] = currentNetwork.networkCubeDataSet.linkTable;\n    var normalizedLocationTable: any[] = currentNetwork.networkCubeDataSet.locationTable;\n    var networkcubeNodeSchema: networkcube.NodeSchema = currentNetwork.networkCubeDataSet.nodeSchema;\n    var networkcubeLinkSchema: networkcube.LinkSchema = currentNetwork.networkCubeDataSet.linkSchema;\n    var networkcubeLocationSchema: networkcube.LocationSchema = currentNetwork.networkCubeDataSet.locationSchema;\n\n    // if(normalizedLocationTable)       \n    // displayLocationTable();\n\n    var locationLabels: string[] = [];\n    if (currentNetwork.userLocationTable != undefined) {\n        for (var i = 1; i < currentNetwork.userLocationTable.data.length; i++) {\n            locationLabels.push(currentNetwork.userLocationTable.data[i][currentNetwork.userLocationSchema.label]);\n        }\n    }\n    console.log('locationLabels', locationLabels);\n\n    // check for normalization of link table\n    var nodeIds: number[] = [];\n    var names: string[] = [];\n    var nodeLocations: number[][] = [];\n    var nodeTimes: number[][] = [];\n    if (currentNetwork.userNodeTable == undefined) {\n        console.log('no node table found, create node table')\n        var linkData = currentNetwork.userLinkTable.data;\n        var id_source: number;\n        var id_target: number;\n        var name: string;\n        var loc: string;\n        var linkSchema: vistorian.VLinkSchema = currentNetwork.userLinkSchema;\n        var timeString: string;\n        var timeFormatted: string;\n\n        // Create node table\n        for (var i = 1; i < linkData.length; i++) {\n\n            // source\n            name = linkData[i][linkSchema.source];\n            if (names.indexOf(name) < 0) {\n                id_source = nodeIds.length\n                names.push(name);\n                nodeIds.push(id_source);\n                nodeLocations.push([]);\n                nodeTimes.push([]);\n            }\n\n            // target\n            name = linkData[i][linkSchema.target];\n            if (names.indexOf(name) < 0) {\n                id_target = nodeIds.length;\n                names.push(name);\n                nodeIds.push(id_target);\n                nodeLocations.push([]);\n                nodeTimes.push([]);\n            }\n        }\n\n\n        // create new link table and replace source label by source id\n        normalizedLinkTable = [];\n        var linkTime: string;\n        var found: boolean = true;\n        for (var i = 0; i < linkData.length; i++) {\n            normalizedLinkTable.push([])\n            for (var j = 0; j < linkData[i].length; j++) {\n                normalizedLinkTable[i].push(linkData[i][j])\n            }\n\n            // replace node names by node IDs, i.e. references to node table.\n            if (networkcube.isValidIndex(linkSchema.source)) {\n                normalizedLinkTable[i][linkSchema.source] = nodeIds[names.indexOf(linkData[i][linkSchema.source])]\n            }\n            if (networkcube.isValidIndex(linkSchema.target)) {\n                normalizedLinkTable[i][linkSchema.target] = nodeIds[names.indexOf(linkData[i][linkSchema.target])]\n            }\n\n            id_source = names.indexOf(linkData[i][linkSchema.source]);\n            id_target = names.indexOf(linkData[i][linkSchema.target]);\n\n            if (id_source == -1 || id_target == -1)\n                continue;\n\n            // if source and target locations are available, set to indices.\n            //source location\n            if (linkSchema.location_source > -1) {\n                loc = linkData[i][linkSchema.location_source].trim();\n                id = locationLabels.indexOf(loc);\n                if (id == -1)\n                    continue;\n\n                // console.log('source_location id: ', loc, id_source, id)                    \n                // check if entry already exists for this node and this time, if not, add this location to the nodes locations.\n                found = false;\n                for (var t = 0; t < nodeTimes[id_source].length; t++) {\n                    if (nodeTimes[id_source][t] == linkData[i][linkSchema.time]) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    nodeTimes[id_source].push(linkData[i][linkSchema.time])\n                    nodeLocations[id_source].push(id)\n                }\n                normalizedLinkTable[i][linkSchema.location_source] = id;\n            }\n            //target location\n            if (linkSchema.location_target > -1) {\n\n                loc = linkData[i][linkSchema.location_target].trim();\n                id = locationLabels.indexOf(loc);\n                if (id == -1)\n                    continue;\n\n                console.log('source_location id: ', loc, id_target, id)\n                // check if entry already exists for this time, if yes, discard this one.           \n                found = false;\n                for (var t = 0; t < nodeTimes[id_target].length; t++) {\n                    if (nodeTimes[id_target][t] == linkData[i][linkSchema.time]) {\n                        found = true;\n                        break;\n                    }\n                }\n                if (!found) {\n                    nodeTimes[id_target].push(linkData[i][linkSchema.time])\n                    nodeLocations[id_target].push(id)\n                }\n                normalizedLinkTable[i][linkSchema.location_target] = id;\n            }\n\n        }\n        // remove header information from user table\n        normalizedLinkTable.shift();\n\n        // create normalizedNodeTable\n        var time: string;\n        normalizedNodeTable = [];\n        var locationsFound: boolean = false;\n        var timeFound: boolean = false;\n        if (nodeLocations.length > 0) {\n            networkcubeNodeSchema.location = 4;\n        }\n        if (nodeTimes.length > 0) {\n            networkcubeNodeSchema.location = 3;\n        }\n\n        for (var i = 0; i < nodeIds.length; i++) {\n            // duplicate node entry if there is temporal information (currently e.g.: location)\n            // console.log('nodeTimes[i]', nodeLocations[i].length)\n            if (nodeLocations[i].length > 0) {\n                locationsFound = true;\n                for (var j = 0; j < nodeLocations[i].length; j++) {\n                    time = undefined;\n                    if (nodeTimes[i][j]) {\n                        time = nodeTimes[i][j];\n                    }\n                    normalizedNodeTable.push([nodeIds[i], names[i], nodeTimes[i][j], nodeLocations[i][j]]);\n                }\n            } else {\n                // no locations specified\n                if (networkcube.isValidIndex(currentNetwork.userNodeSchema.time)) {\n                    // time specified in schema\n                    normalizedNodeTable.push([nodeIds[i], names[i], undefined, undefined]);\n                } else {\n                    // no time specified in schema\n                    normalizedNodeTable.push([nodeIds[i], names[i], undefined]);\n                }\n            }\n        }\n    }\n\n    if (currentNetwork.userNodeTable) {\n        networkcubeNodeSchema = new networkcube.NodeSchema(0);\n        networkcubeNodeSchema.id = currentNetwork.userNodeSchema.id;\n        networkcubeNodeSchema.label = currentNetwork.userNodeSchema.label;\n        if (networkcube.isValidIndex(currentNetwork.userNodeSchema.time)) {\n            networkcubeNodeSchema.time = currentNetwork.userNodeSchema.time;\n        }\n        if (networkcube.isValidIndex(currentNetwork.userNodeSchema.location)) {\n            networkcubeNodeSchema.location = currentNetwork.userNodeSchema.location;\n        }\n        if (networkcube.isValidIndex(currentNetwork.userNodeSchema.nodeType)) {\n            networkcubeNodeSchema.nodeType = currentNetwork.userNodeSchema.nodeType;\n        }\n    } else {\n        networkcubeNodeSchema = new networkcube.NodeSchema(0);\n        networkcubeNodeSchema.id = 0;\n        networkcubeNodeSchema.label = 1;\n        if (networkcube.isValidIndex(currentNetwork.userLinkSchema.time)) {\n            networkcubeNodeSchema.time = 2;\n        }\n        if (networkcube.isValidIndex(currentNetwork.userLinkSchema.location_source) || networkcube.isValidIndex(currentNetwork.userLinkSchema.location_target)) {\n            networkcubeNodeSchema.location = 3;\n        }\n\n    }\n\n\n    // check for normalization of node table\n    if (currentNetwork.userLinkTable == undefined) {\n        console.log('Create and fill link table')\n        // create link table and fill\n        var nodeData = currentNetwork.userNodeTable.data;\n        var nodeSchema: vistorian.VNodeSchema = currentNetwork.userNodeSchema;\n        var id: number;\n        var relCol: number;\n        var newRow: any[];\n        var nodeId: number;\n        var newNodeId: number = nodeData.length + 1;\n\n        // networkcubeLinkSchema = new networkcube.LinkSchema(0, 1, 2)\n        networkcubeLinkSchema.linkType = 3;\n        if (networkcube.isValidIndex(nodeSchema.time))\n            networkcubeLinkSchema.time = 4;\n\n\n        // copy existing nodes into new table\n        for (var i = 1; i < nodeData.length; i++) {\n            newRow = [];\n            id = parseInt(nodeData[i][nodeSchema.id]);\n            while (normalizedNodeTable.length < (id + 1)) {\n                // insert empty rows if index is too small\n                normalizedNodeTable.push([]);\n            }\n            newRow.push(id);\n            newRow.push(nodeData[i][nodeSchema.label]);\n            normalizedNodeTable[id] = newRow;\n        }\n\n\n        for (var i = 1; i < nodeData.length; i++) {\n\n            // create relations in link table\n            for (var j = 0; j < nodeSchema.relation.length; j++) {\n                relCol = nodeSchema.relation[j];\n\n                // dont create relation if field entry is empty;\n                if (nodeData[i][relCol].length == 0)\n                    continue;\n\n                // check if node already exist\n                nodeId = -1;\n                for (var k = 0; k < normalizedNodeTable.length; k++) {\n                    // console.log('check node existance: ', normalizedNodeTable[k][1], nodeData[i][relCol])\n                    if (normalizedNodeTable[k][1] == nodeData[i][relCol]) {\n                        nodeId = k;\n                        break;\n                    }\n                }\n                if (nodeId < 0) {\n                    // create new node in node table\n                    nodeId = normalizedNodeTable.length;\n                    newRow = [];\n                    newRow.push(nodeId);\n                    newRow.push(nodeData[i][relCol]);\n                    newRow.push(undefined); // time\n                    newRow.push(undefined); // location\n                    normalizedNodeTable.push(newRow)\n                    // console.log('create node', nodeId,  nodeData[i][relCol]);\n                }\n\n                // create entry in link table\n                newRow = []\n                // edge id\n                newRow.push(normalizedLinkTable.length);\n                // source id\n                newRow.push(parseInt(nodeData[i][nodeSchema.id]));\n                // target id\n                newRow.push(nodeId);\n                // relation type\n                newRow.push(nodeData[0][relCol]);\n                // time\n                if (nodeSchema.time > -1)\n                    newRow.push(nodeData[i][nodeSchema.time]);\n\n                normalizedLinkTable.push(newRow);\n                // console.log('create edge row', newRow);\n\n            }\n\n        }\n    }\n\n\n\n    // set networkcube link schema\n    if (currentNetwork.userLinkTable) {\n        for (var field in currentNetwork.userLinkSchema) {\n            if (field == 'name') continue;\n            networkcubeLinkSchema[field] = currentNetwork.userLinkSchema[field];\n        }\n    }\n\n    // format times into ISO standart time\n    if (currentNetwork.hasOwnProperty('timeFormat') && currentNetwork.timeFormat != undefined && currentNetwork.timeFormat.length > 0) {\n        var format = currentNetwork.timeFormat;\n        if (networkcubeLinkSchema.time != undefined && networkcubeLinkSchema.time > -1) {\n            for (var i = 0; i < normalizedLinkTable.length; i++) {\n                time = moment(normalizedLinkTable[i][networkcubeLinkSchema.time], format).format(networkcube.timeFormat())\n                if (time.indexOf('Invalid') > -1)\n                    time = undefined;\n                normalizedLinkTable[i][networkcubeLinkSchema.time] = time;\n            }\n        }\n\n        if (networkcubeNodeSchema.time != undefined && networkcubeNodeSchema.time > -1) {\n            for (var i = 0; i < normalizedNodeTable.length; i++) {\n                time = moment(normalizedNodeTable[i][networkcubeNodeSchema.time], format).format(networkcube.timeFormat());\n                if (time.indexOf('Invalid') > -1)\n                    time = undefined;\n                normalizedNodeTable[i][networkcubeNodeSchema.time] = time\n            }\n        }\n    }\n\n    // sync location tables\n    if (currentNetwork.userLocationTable) {\n        currentNetwork.networkCubeDataSet.locationTable = currentNetwork.userLocationTable.data.slice(0);\n        currentNetwork.networkCubeDataSet.locationTable.shift();\n        currentNetwork.networkCubeDataSet.locationSchema = currentNetwork.userLocationSchema;\n    }\n\n    // to be save    \n    currentNetwork.networkCubeDataSet.nodeTable = normalizedNodeTable;\n    currentNetwork.networkCubeDataSet.linkTable = normalizedLinkTable;\n    currentNetwork.networkCubeDataSet.linkSchema = networkcubeLinkSchema;\n    currentNetwork.networkCubeDataSet.nodeSchema = networkcubeNodeSchema;\n\n    // console.log('[vistorian] network created', networkcubeDataSet);\n\n    storage.saveNetwork(currentNetwork);\n    showNetwork(currentNetwork.id);\n    networkcube.setDataManagerOptions({ keepOnlyOneSession: true });\n    networkcube.importData(SESSION_NAME, currentNetwork.networkCubeDataSet);\n    console.log('>> IMPORTED: ', currentNetwork.networkCubeDataSet);\n\n    loadNetworkList();\n}\n\nfunction deleteCurrentNetwork() {\n    storage.deleteNetwork(currentNetwork);\n    unshowNetwork();\n    loadNetworkList();\n}\n\n\nfunction showNetwork(networkId: number) {\n\n    unshowNetwork();\n    $('#noNetworkTables').css('display', 'none');\n\n    currentNetwork = storage.getNetwork(networkId);\n\n    if (currentNetwork == null)\n        return;\n\n    // unshow individual tables\n    $('#individualTables').css('display', 'none');\n    $('#networkTables').css('display', 'inline');\n\n    // set network name\n    $('#networknameInput').val(currentNetwork.name);\n\n    // get all tables for this user so that he can select those \n    // he wants to create his network from.\n    var tables = storage.getUserTables()\n\n    $('#nodetableSelect').append('<option>---</option>')\n    $('#linktableSelect').append('<option>---</option>')\n    $('#locationtableSelect').append('<option>---</option>')\n\n    tables.forEach(t => {\n        $('#nodetableSelect')\n            .append('<option value=\"' + t.name + '\">' + t.name + '</option>')\n        $('#linktableSelect')\n            .append('<option value=\"' + t.name + '\">' + t.name + '</option>')\n        $('#locationtableSelect')\n            .append('<option value=\"' + t.name + '\">' + t.name + '</option>')\n    });\n\n    // if this network already has tables, show them\n    if (currentNetwork.userNodeTable) {\n        showTable(currentNetwork.userNodeTable, '#nodeTableDiv', false, currentNetwork.userNodeSchema);\n        $('#nodetableSelect').val(currentNetwork.userNodeTable.name);\n    }\n    if (currentNetwork.userLinkTable) {\n        showTable(currentNetwork.userLinkTable, '#linkTableDiv', false, currentNetwork.userLinkSchema);\n        $('#linktableSelect').val(currentNetwork.userLinkTable.name);\n    }\n    if (currentNetwork.userLocationTable) {\n        showTable(currentNetwork.userLocationTable, '#locationTableDiv', true, currentNetwork.userLocationSchema);\n        $('#locationtableSelect').val(currentNetwork.userLocationTable.name);\n    }\n\n\n    $('#tileViewLink').attr('href', 'visview.html?session=' + SESSION_NAME + '&datasetName=' + currentNetwork.name.split(' ').join('___'))\n\n    // MarieBoucherTest.run(SESSION_NAME, currentNetwork.name);\n\n}\n\n// removes a displayed table from the DOM\nfunction unshowNetwork() {\n    $('#noNetworkTables').css('display', 'block');\n\n    $('#nodetableSelect').empty();\n    $('#linktableSelect').empty();\n    $('#locationtableSelect').empty();\n    unshowTable('#linkTableDiv');\n    unshowTable('#nodeTableDiv');\n    unshowTable('#locationTableDiv');\n    $('#networkTables').css('display', 'none');\n    $('#tileViewLink').attr('href', 'visview.html?session=' + SESSION_NAME)\n}\n\n\n\n\n\n\n\n\n// TABLES ///\n\n// removes a displayed table from the DOM\nfunction unshowTable(elementName: string) {\n    $(elementName).empty();\n}\n\nvar currentTable: vistorian.VTable;\n\nfunction showSingleTable(tableName: string) {\n    currentTable = storage.getUserTable(tableName);\n    showTable(currentTable, '#individualTable', false);\n    $('#individualTables').css('display', 'inline');\n    $('#networkTables').css('display', 'none');\n    $('#noNetworkTables').css('display', 'none');\n\n}\n\n// displays a table into the DOM\n// - if schema is passed, shows the schema on the dropdown\n// - if user selects a time field, displays field to specify time format\nvar currentTableId: string;\nvar currentCell;\nfunction showTable(table: vistorian.VTable, elementName: string, isLocationTable: boolean, schema?: vistorian.VTableSchema) {\n    var tHead, tBody;\n\n    console.log('showtable', table.name, table.data)\n\n    currentTable = table;\n\n    $(elementName).empty();\n\n    // table name\n    var tableId = 'datatable_' + table.name;\n    currentTableId = tableId\n    $('#' + tableId).remove();\n\n    var tableDiv = $('<div id=\"div_' + tableId + '\"></div>');\n    $(elementName).append(tableDiv);\n\n    var tableMenu = $('<div class=\"tableMenu\"></div>');\n    tableDiv.append(tableMenu);\n\n    // CREATE TABLE MENU    \n    // export button\n    var csvExportButton = $('<button class=\"tableMenuButton\" onclick=\"exportCurrentTableCSV(\\'' + table.name + '\\')\">Export as CSV</button>')\n    tableMenu.append(csvExportButton);\n\n    // location extraction button\n    var extractLocationCoordinatesButton\n    if (isLocationTable) {\n        extractLocationCoordinatesButton = $('<button class=\"tableMenuButton\" onclick=\"updateLocations()\">Update location coordinates</button>')\n    } else {\n        extractLocationCoordinatesButton = $('<button class=\"tableMenuButton\" onclick=\"extractLocations()\">Extract locations</button>')\n    }\n    tableMenu.append(extractLocationCoordinatesButton);\n\n    // replace function\n    tableMenu.append('Replace <input id=\"replace_pattern\" type=\"text\"/> by <input type=\"text\" id=\"replace_value\"/><input id=\"replaceButton\" type=\"button\" class=\"tableMenuButton\" onclick=\"replaceCellContents()\" value=\"Replace\"/>');\n\n\n    // table status\n    tableMenu.append('<div id=\"datatable_' + table.name + '_tool\" ></div>');\n    tableMenu.append('<div id=\"datatable_' + table.name + '_error\" ></div>');\n\n    // create table\n\n    var tab = $('<table id=\"' + tableId + '\">');\n    tableDiv.append(tab);\n    tab.addClass('datatable stripe hover cell-border and order-column compact');\n\n    // create head\n    tHead = $('<thead>');\n    tab.append(tHead);\n    var tr = $('<tr></tr>').addClass('tableheader');\n    tHead.append(tr);\n\n    var data = table.data\n    for (var c = 0; c < data[0].length; c++) {\n        var td = $('<th></th>').addClass('th').attr('contenteditable', 'false');\n        tr.append(td);\n        td.html(data[0][c]);\n    }\n\n    tBody = $('<tbody></tbody>');\n    tab.append(tBody);\n\n    // Load data into html table\n    for (var r = 1; r < data.length; r++) {\n        tr = $('<tr></tr>').addClass('tablerow')\n        tBody.append(tr);\n        for (var c = 0; c < data[r].length; c++) {\n            td = $('<td></td>').attr('contenteditable', 'true');\n            td.data('row', r);\n            td.data('column', c);\n            td.data('table', table);\n\n            tr.append(td);\n            td.html(data[r][c])\n            td.blur(function() {\n                console.log('td.blur');\n                if ($(this).html().length == 0) {\n                    $(this).addClass('emptyTableCell')\n                } else {\n                    $(this).removeClass('emptyTableCell')\n                }\n            });\n            td.focusin(function(e) {\n                console.log('td.focusin');\n                saveCellChanges();\n                currentCell = $(this);\n            });\n            td.focusout(function(e) {\n                console.log('td.focusout');\n                saveCellChanges();\n            });\n            if (typeof data[r][c] == 'string' && data[r][c].trim().length == 0)\n                td.addClass('emptyTableCell')\n        }\n    }\n    // addOption('table_select', [{'id':'datatable_' + table.id,'name':table.name}]);\n\n\n    // turn table into an interactive jQuery table\n    var dtable = $('#' + tableId).DataTable({\n        \"autoWidth\": true\n    });\n    dtable.columns.adjust().draw();\n\n    // handle cell change events and store new values in data table\n    // $('#' + tableId + ' tbody').on('click', 'td', function() {\n    //     saveCellChanges();\n    //     currentCell = $(this);\n    // });\n\n\n\n    // Add schema selection to table, if a schema is passed\n    console.log('schema:', schema)\n    if (schema) {\n        console.log('schema found')\n\n        // add schema header\n        var schemaRow = $('<tr class=\"schemaRow\"></tr>');\n        $('#' + tableId + ' > thead').append(schemaRow);\n\n        var select, cell, option, timeFormatInput;\n\n        for (var i = 0; i < table.data[0].length; i++) {\n            cell = $('<th class=\"schemaCell\" id=\"schemaCell_' + schema.name + '_' + i + '\"></th>')\n            schemaRow.append(cell);\n            select = $('<select onchange=\"schemaSelectionChanged(this.value, ' + i + ' , \\'' + schema.name + '\\')\"></select>');\n            cell.append(select);\n            select.append('<option>---</option>')\n            for (var field in schema) {\n                if (field == 'name'\n                    || field == 'constructor'\n                    || field == 'timeFormat')\n                    continue;\n\n                option = $('<option>' + field + '</option>');\n                select.append(option);\n\n                if (i == 0 && field == 'id') {\n                    $(option).attr('selected', 'selected');\n                    schema[field] = 0;\n                }\n\n                if (schema[field] == i) {\n                    $(option).attr('selected', 'selected');\n                    if (field == 'time') {\n                        timeFormatInput = $('<input type=\"text\" size=\"30\" id=\"timeFormatInput_' + schema.name + '\"></input>')\n                        cell.append(timeFormatInput)\n                        if (currentNetwork.hasOwnProperty('timeFormat')) {\n                            timeFormatInput.val(currentNetwork.timeFormat);\n                        }\n                    }\n                }\n\n                // check relations\n                if (field == 'relation') {\n                    for (var k = 0; k < schema.relation.length; k++) {\n                        if (schema.relation[k] == i) {\n                            $(option).attr('selected', 'selected');\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\n// function showLocationTable(table:any[], elementName:string, schema:networkcube.LocationSchema){\n//     var tHead, tBody;\n//     console.log('>>>Show location table');\n\n//     $(elementName).empty();\n\n//     // table name\n//     var tableId = 'datatable_locationTable';\n//     $('#'+tableId).remove();\n\n//     var tableDiv = $('<div id=\"div_'+ tableId +'\"></div>');\n//     $(elementName).append(tableDiv);\n\n//     var tableMenu = $('<div class=\"tableMenu\"></div>');\n//     tableDiv.append(tableMenu);\n\n//     // tableMenu.append('<p id=\"datatable_locationTable_name\"><b>Name:</b>Locations</p>');\n//     // var csvExportButton = $('<button class=\"csvExportButton\" onclick=\"exportCurrentTableCSV()\">Export as CSV</button>')\n//     // tableMenu.append(csvExportButton);\n//     // export button\n//     var csvExportButton = $('<button class=\"tableMenuButton\" onclick=\"exportLocationTableCSV()\">Export as CSV</button>')\n//     tableMenu.append(csvExportButton);\n\n\n//     // table status\n//     tableMenu.append('<div id=\"datatable_locationTable_tool\" ></div>');\n//     tableMenu.append('<div id=\"datatable_locationTable_error\" ></div>');\n\n//     // create table\n\n//     var tab = $('<table id=\"'+ tableId + '\" style=\"width: 100%\">');\n//     tableDiv.append(tab);\n//     tab.addClass('datatable stripe hover cell-border and order-column compact');\n\n//     // create head\n//     tHead = $('<thead>');\n//     tab.append(tHead);\n//     var tr = $('<tr></tr>').addClass('tableheader');\n//     tHead.append(tr);\n\n//     if(table[0] == undefined)\n//         return;\n\n//     // add header to table\n//     var firstRow:any[]= [-1,-1,-1,-1];\n//     for(field in schema){\n//         firstRow[schema[field]] = field;\n//     }\n\n\n//     var data = table.slice(0);\n//     data.splice(0, 0, firstRow);\n//     for (var c = 0; c < data[0].length; c++) {\n//         var td = $('<th></th>').addClass('th').attr('contenteditable', 'false');\n//         tr.append(td);\n//         td.html(data[0][c]);\n//     }\n\n//     tBody = $('<tbody></tbody>');\n//     tab.append(tBody);\n\n//     // Load data into html table\n//     for (var r = 1; r < data.length; r++) {\n//         tr = $('<tr></tr>').addClass('tablerow')\n//         tBody.append(tr);\n//         for (var c = 0; c < data[r].length; c++) {\n//             td = $('<td></td>').attr('contenteditable', 'true');\n//             tr.append(td);\n//             td.html(data[r][c])\n//             td.blur(function() {\n//                 if($(this).html().length == 0){\n//                     $(this).addClass('emptyTableCell')\n//                 }else{\n//                     $(this).removeClass('emptyTableCell')\n//                 }\n//             });\n//             if(typeof data[r][c] == 'string'  && data[r][c].trim().length == 0)\n//                 td.addClass('emptyTableCell')\n//         }\n//     }\n//     // addOption('table_select', [{'id':'datatable_' + table.id,'name':table.name}]);\n\n\n//     // turn table into an interactive jQuery table\n//     $('#' + tableId).DataTable( {\n//         \"autoWidth\": true\n//     } );\n\n//     // handle cell change events and store new values in data table\n//     $('#'+tableId+ ' tbody').on( 'click', 'td', function () {\n//         // if(selectedCell_row != undefined && selectedCell_col != undefined){\n//         //     var text = $('#' + tableId + ' tbody').children()[selectedCell_row].children[selectedCell_col].innerText;        \n//         //     table[selectedCell_row][selectedCell_col] = text.trim();\n//         //     console.log('Cell content replaced', table.data[selectedCell_row][selectedCell_col], text);    \n//         //     showNetwork(currentNetwork.id);\n//         // }   \n//         saveCellChanges();     \n//         selectedCell_row = $(this).parent().index();\n//         selectedCell_col = $(this).index();\n//     });\n\n//     // Add schema selection to table, if a schema is passed\n//     if(schema && table[0])\n//     {\n//         console.log('schema found')\n\n//         // add schema header\n//         var schemaRow = $('<tr class=\"schemaRow\"></tr>');\n//         $('#' + tableId + ' > thead').append(schemaRow);\n\n//         var select, cell, option, timeFormatInput;\n\n//         for(var i=0 ; i<table[0].length ; i++){\n//             cell = $('<th class=\"schemaCell\" id=\"schemaCell_'+schema.name+'_'+i+'\"></th>')\n//             schemaRow.append(cell);\n//             select = $('<select onchange=\"schemaSelectionChanged(this.value, '+i+' , \\''+ schema.name+'\\')\"></select>');\n//             cell.append(select);\n//             select.append('<option>---</option>')\n//             for (var field in schema) {\n//                 if(field == 'name'\n//                 || field == 'constructor'\n//                 || field == 'timeFormat')\n//                     continue;\n\n//                 option = $('<option>'+field+'</option>');\n//                 select.append(option);\n\n//                 if(i==0 && field=='id'){\n//                     $(option).attr('selected','selected');\n//                     schema[field] = 0;\n//                 }\n\n//                 if(schema[field] == i){\n//                     $(option).attr('selected','selected');\n//                     if(field == 'time'){\n//                         timeFormatInput = $('<input type=\"text\" size=\"30\" id=\"timeFormatInput_'+schema.name+'\"></input>')\n//                         cell.append(timeFormatInput)\n//                         if(currentNetwork[schema.name].hasOwnProperty('timeFormat')){\n//                             timeFormatInput.val(currentNetwork[schema.name].timeFormat);\n//                         }\n//                     }                    \n//                 }\n//             }\n//         }\n//     }\n// }\n\nfunction deleteCurrentTable() {\n    storage.deleteTable(currentTable);\n    $('#individualTables').css('display', 'none');\n    loadTableList();\n}\n\n// called when the user assigns a schema in an table\nfunction schemaSelectionChanged(field: string, columnNumber: number, schemaName: string, parent: HTMLElement) {\n\n    console.log('schemaSelectionChanged', field, columnNumber, schemaName)\n\n    // reset schema:\n    for (var field2 in currentNetwork[schemaName]) {\n        if (field2 == 'relation' && currentNetwork[schemaName][field2].indexOf(columnNumber) > -1) {\n            var arr = currentNetwork[schemaName][field]\n            currentNetwork[schemaName][field2].slice(arr.indexOf(columnNumber), 0);\n        } else\n            if (currentNetwork[schemaName][field2] == columnNumber) {\n                console.log('set ', field2, 'to -1');\n                currentNetwork[schemaName][field2] = -1;\n            }\n    }\n\n    if (field == 'relation') {\n        currentNetwork[schemaName][field].push(columnNumber);\n    } else if (field != '---') {\n        currentNetwork[schemaName][field] = columnNumber;\n    }\n\n    saveCurrentNetwork(false);\n}\n\n\nfunction checkTimeFormatting(network: vistorian.Network) {\n\n    console.log('checkTimeFormatting');\n\n    var corruptedNodeTimes: number[] = [];\n    if (network.userNodeTable && network.userNodeTable && network.userNodeSchema && network.userNodeSchema['timeFormat']) {\n        corruptedNodeTimes = vistorian.checkTime(\n            network.userNodeTable,\n            network.userNodeSchema['time'],\n            network.userNodeSchema['timeFormat']);\n        console.log('corruptedTimes', corruptedNodeTimes);\n    }\n\n    var corruptedLinkTimes: number[] = [];\n    if (network.userLinkTable && network.userLinkSchema && network.userLinkSchema['timeFormat']) {\n        corruptedLinkTimes = vistorian.checkTime(\n            network.userLinkTable,\n            network.userLinkSchema['time'],\n            network.userLinkSchema['timeFormat']);\n        console.log('corruptedTimes', corruptedLinkTimes);\n    }\n\n    // return corruptedNodeTimes.length > 0 || corruptedLinkTimes.length > 0;\n    return false;\n}\n\nfunction removeRow(row: number) {\n\n}\n\n\n/// FILES\n\n\nvar filesToUpload = [];\nfunction getFileInfos(e) {\n    filesToUpload = [];\n    var files: File[] = e.target.files; // FileList object\n    console.log('upload', files.length, 'files')\n\n    // files is a FileList of File objects. List some properties.\n    var output = [];\n    for (var i = 0, f; f = files[i]; i++) {\n        if (f.name.split('.')[1] != 'csv') {\n            output.push('<li style=\"color:#f00;\"><strong>', escape(f.name), '</strong> is not a CSV file.</li>');\n        } else {\n            output.push('<li><strong>',\n                escape(f.name), '</strong> (', f.type || 'n/a', ') - ',\n                f.size, ' bytes, last modified: ',\n                f.lastModifiedDate ? f.lastModifiedDate.toLocaleDateString() : 'n/a',\n                '</li>');\n            filesToUpload.push(f);\n        }\n    }\n    uploadFiles()\n}\n\nfunction uploadFiles() {\n\n    vistorian.loadCSV(filesToUpload, () => {\n        loadTableList();\n    });\n\n}\n\nfunction exportCurrentTableCSV(tableName: string) {\n    saveCellChanges();\n    var table: vistorian.VTable = null;\n\n    if (tableName) {\n        if (currentNetwork.userLinkTable && currentNetwork.userLinkTable.name == tableName)\n            table = currentNetwork.userLinkTable;\n        else if (currentNetwork.userNodeTable && currentNetwork.userNodeTable.name == tableName)\n            table = currentNetwork.userNodeTable;\n        else if (currentNetwork.userLocationTable && currentNetwork.userLocationTable.name == tableName)\n            table = currentNetwork.userLocationTable;\n    }\n\n    if (!table) {\n        table = currentTable;\n    }\n    vistorian.exportTableCSV(table);\n}\n\n// function exportLocationTableCSV() {\n//     if (currentNetwork.networkCubeDataSet.locationTable) {\n//         saveCellChanges();\n//         vistorian.exportLocationTableCSV(currentNetwork.name, currentNetwork.networkCubeDataSet.locationTable);\n//     }\n// }\n\n\n// function displayLocationTable(){  \n// var locationTable = currentNetwork.networkCubeDataSet.locationTable;\n// if(locationTable != undefined)  \n//     showLocationTable(currentNetwork.networkCubeDataSet.locationTable, '#locationTableDiv', currentNetwork.networkCubeDataSet.locationSchema)\n// }\n\nfunction replaceCellContents() {\n    var replace_pattern = $('#replace_pattern').val();\n    var replace_value = $('#replace_value').val();\n    var arr: any[][];\n\n    if (currentTable.data) {\n        arr = currentTable.data\n    } else {\n        arr = currentTable;\n    }\n\n    var replaceCount = 0\n    for (var i = 0; i < arr.length; i++) {\n        for (var j = 0; j < arr[i].length; j++) {\n            if (arr[i][j].indexOf(replace_pattern) > -1) {\n                arr[i][j] = arr[i][j].replace(replace_pattern, replace_value).trim();\n                replaceCount++;\n            }\n        }\n    }\n\n    saveCurrentNetwork(false);\n    showMessage('Cell content replaced', 2000);\n}\n\n/** Extracts locations from node and link tabe**/\nfunction extractLocations() {\n\n    showMessage('Extracting locations...', false);\n\n    if (currentNetwork.userLocationTable == undefined) {\n        var tableName = currentNetwork.name.replace(/ /g, \"_\");\n        currentNetwork.userLocationTable = new vistorian.VTable(tableName + '-locations', []);\n        currentNetwork.userLocationSchema = new networkcube.LocationSchema(0, 1, 2, 3, 4);\n        currentNetwork.userLocationTable.data.push(['Id', 'User Label', 'Geo Name', 'Longitude', 'Latitude']);\n    }\n\n    // console.log('currentNetwork.userLocationTable', currentNetwork.userLocationTable);\n    var locationTable = currentNetwork.userLocationTable;\n    var locationSchema = currentNetwork.userLocationSchema;\n\n    // if location table is empty, add header as first column\n    if (locationTable.data.length == 0) {\n        var schemaStrings: string[] = [];\n        locationTable.data.push(['Id', 'User Label', 'Geoname', 'Longitude', 'Latitude']);\n    }\n    var locationsFound: boolean = false;\n\n    // check node table for locations\n    if (networkcube.isValidIndex(currentNetwork.userNodeSchema.location)) {\n        var nodeTable = currentNetwork.userNodeTable.data;\n        if (nodeTable != undefined) {\n            for (var i = 1; i < nodeTable.length; i++) {\n                createLocationEntry(linkTable[i][currentNetwork.userNodeSchema.location], locationTable.data)\n            }\n        }\n    }\n    // check link table\n    if (networkcube.isValidIndex(currentNetwork.userLinkSchema.location_source)) {\n        var linkTable = currentNetwork.userLinkTable.data;\n        if (linkTable != undefined) {\n            // check if location table exists\n            locationsFound = true;\n            for (var i = 1; i < linkTable.length; i++) {\n                createLocationEntry(linkTable[i][currentNetwork.userLinkSchema.location_source], locationTable.data)\n            }\n        }\n    }\n    if (networkcube.isValidIndex(currentNetwork.userLinkSchema.location_target)) {\n        // check if location table exists\n        if (linkTable != undefined) {\n            locationsFound = true;\n            for (var i = 1; i < linkTable.length; i++) {\n                createLocationEntry(linkTable[i][currentNetwork.userLinkSchema.location_target], locationTable.data)\n            }\n        }\n    }\n\n    saveCurrentNetwork(false);\n    showNetwork(currentNetwork.id);\n\n    if (locationsFound)\n        showMessage('Locations updated', 2000);\n    else\n        showMessage('In order to extract locations, you must specify which columns are locations in your node and link tables.', 2000);\n}\n\nfunction createLocationEntry(name: string, rows: any[]) {\n\n    // check validity\n    if (name == undefined\n        || name.length == 0)\n        return;\n\n    // check if location entry exists already.     \n    for (var i = 0; i < rows.length; i++) {\n        if (rows[i][1].length == name.length\n            && rows[i][1].indexOf(name) > -1)\n            return;\n    }\n\n    rows.push([rows.length - 1, name, name, undefined, undefined]);\n}\n\n/** Updates long/lat for geonames field in the location table**/\nfunction updateLocations() {\n    showMessage('Updating locations...', false);\n\n    vistorian.updateLocationTable(currentNetwork.userLocationTable, currentNetwork.networkCubeDataSet.locationSchema,\n        function(nothingImportant) {\n            console.log('currentNetwork.userLocationTable', currentNetwork.userLocationTable.data)\n            saveCurrentNetwork(false);\n            showNetwork(currentNetwork.id);\n            showMessage('Locations updated', 2000);\n        });\n}\n\nvar msgBox;\nfunction showMessage(message: string, timeout) {\n    if ($('.messageBox'))\n        $('.messageBox').remove();\n    msgBox = $('<div class=\"messageBox\"></div>');\n    msgBox.append('<p>' + message + '<p>');\n    msgBox.css('left', (window.innerWidth - 600) / 2)\n    $('body').append(msgBox);\n    msgBox.click(function() {\n        $('.messageBox').remove();\n    })\n\n    if (timeout) {\n        // Automatically disappear\n        window.setTimeout(function() {\n            $('.messageBox').fadeOut(1000);\n        }, timeout);\n    }\n\n}\n\n\nfunction saveCellChanges() {\n    if (currentCell == undefined)\n        return;\n\n    var selectedCell_row = currentCell.data('row');\n    var selectedCell_col = currentCell.data('column');\n\n    console.log('saveCellChanges', selectedCell_row, selectedCell_col);\n\n    if (selectedCell_row != undefined && selectedCell_col != undefined) {\n        currentCell.data('table').data[selectedCell_row][selectedCell_col] = currentCell.html().trim();\n    }\n} "],"sourceRoot":"/source/"}