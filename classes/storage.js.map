{"version":3,"sources":["vistorian/classes/storage.ts"],"names":[],"mappings":"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","file":"vistorian/classes/storage.js","sourcesContent":["/// <reference path=\"../scripts/jstorage.d.ts\"/>\n/// <reference path=\"./vistorian.ts\"/>\n\nmodule storage{\n\n\n    var SESSION_TABLENAMES:string = \"vistorian.tablenames\";\n    var SESSION_TABLE:string = \"vistorian.table\";\n    var SESSION_NETWORK:string = \"vistorian.network\";\n    var SESSION_NETWORKIDS:string = \"vistorian.networkIds\";\n    var SESSION_SESSIONID:string = \"vistorian.lastSessionId\";\n\n    var SEP:string = \"#\";\n\n\n\n    // SESSION\n    export function saveSessionId(){\n        console.log('save session', SESSION_NAME )\n        $.jStorage.set(SESSION_SESSIONID, SESSION_NAME);\n    }\n\n    export function getLastSessionId():string{\n        var session:string = $.jStorage.get<string>(SESSION_SESSIONID);\n        console.log('get session, ', session)\n        return session;\n    }\n\n\n\n    // TABLES\n\n    // Stores all user's tables (tables must be in json format)\n    export function saveUserTable(table){\n        console.log('[vistorian] Save user table', table.name);\n\n        // add name to table names if not yet there.\n        var tableNames:string[] = getTableNames();\n        var found = false;\n        if(!tableNames){\n            tableNames = [];\n        }else{\n            tableNames.forEach(tableName => {\n                if(tableName == table.name){\n                    found = true;\n                }\n            })\n        }\n        if(!found){\n            console.log('\\tTable', table.name, 'not found. Table added.')\n            tableNames.push(table.name);\n            saveTableNames(tableNames);\n        }else{\n            console.log('\\tTable', table.name, 'found. Replace table')\n        }\n        $.jStorage.set(SESSION_NAME + SEP + SESSION_TABLE + SEP + table.name, table);\n        console.log('\\tTable', table.name, 'added.', getTableNames().length + ' tables stored.')\n\n    }\n\n    // returns all users' tables\n    export function getUserTables():vistorian.VTable[]{\n\n        var tablenames:string[] = this.getTableNames();\n        var tables:vistorian.VTable[] = [];\n        for(var i=0 ; i<tablenames.length ; i++){\n            tables.push($.jStorage.get<vistorian.VTable>(SESSION_NAME + SEP + SESSION_TABLE + SEP + tablenames[i]));\n        }\n        return tables;\n    }\n\n    export function getUserTable(tablename:string):vistorian.VTable{\n        return $.jStorage.get<vistorian.VTable>(SESSION_NAME + SEP + SESSION_TABLE + SEP + tablename)\n    }\n\n    export function getTableNames():string[]{\n        var names:string[] = $.jStorage.get<string[]>(SESSION_NAME + SEP + SESSION_TABLENAMES);\n        if(names == undefined)\n            names = []\n        return names;\n}\n    export function saveTableNames(tableNames){\n        $.jStorage.set(SESSION_NAME + SEP + SESSION_TABLENAMES, tableNames);\n    }\n    export function deleteTable(table:vistorian.VTable){\n        console.log('delete table', table);\n        $.jStorage.deleteKey(SESSION_NAME + SEP + SESSION_TABLE + SEP + table.name);\n\n        var tableNames:string[] = getTableNames();\n        var found = false;\n        if(!tableNames){\n            tableNames = [];\n        }else{\n            tableNames.forEach(tableName => {\n                if(tableName == table.name){\n                    found = true;\n                }\n            })\n        }\n        if(found){\n            tableNames.splice(tableNames.indexOf(table.name), 1);\n            saveTableNames(tableNames);\n        }\n        console.log('table deleted', getTableNames());\n    }\n\n\n    // NETWORKS\n\n    export function saveNetwork(network:vistorian.Network){\n\n        // add name to table names if not yet there.\n        var networkIds:number[] = getNetworkIds();\n        var found = false;\n        if(!networkIds){\n            networkIds = [];\n        }else{\n            networkIds.forEach(networkId => {\n                if(networkId == network.id){\n                    found = true;\n                }\n            })\n        }\n        if(!found){\n            networkIds.push(network.id);\n            saveNetworkIds(networkIds);\n        }\n        $.jStorage.set(SESSION_NAME + SEP + SESSION_NETWORK + SEP + network.id, network);\n\n    }\n    export function getNetworkIds():number[]{\n        var ids:number[] = $.jStorage.get<number[]>(SESSION_NAME + SEP + SESSION_NETWORKIDS);\n        if(ids == undefined)\n            ids = []\n        return ids;\n    }\n    export function saveNetworkIds(networkIds){\n        $.jStorage.set(SESSION_NAME + SEP + SESSION_NETWORKIDS, networkIds);\n    }\n\n    export function getNetwork(networkId:number):vistorian.Network{\n        return $.jStorage.get<vistorian.Network>(SESSION_NAME + SEP + SESSION_NETWORK + SEP + networkId);\n    }\n\n    export function deleteNetwork(network:vistorian.Network){\n        $.jStorage.set(SESSION_NAME + SEP + SESSION_NETWORK + SEP + network.id, {});\n        $.jStorage.deleteKey(SESSION_NAME + SEP + SESSION_NETWORK + SEP + network.id);\n\n        var networkIds = getNetworkIds();\n        var found = false;\n        if(!networkIds){\n            networkIds = [];\n        }else{\n            networkIds.forEach(networkId => {\n                if(networkId == network.id){\n                    found = true;\n                }\n            })\n        }\n        if(found){\n            networkIds.splice(networkIds.indexOf(network.id),1);\n            saveNetworkIds(networkIds);\n        }\n        console.log('[storage] Network removed', getNetworkIds().length, 'networks remaining.');\n    }\n}\n"],"sourceRoot":"/source/"}